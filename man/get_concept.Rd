% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_concept.R
\name{get_concept}
\alias{get_concept}
\title{Get a concept in an ontology}
\usage{
get_concept(..., regex = FALSE, external = FALSE, ontology = NULL)
}
\arguments{
\item{...}{combination of column name and value to filter that column by. The
value to filter by can be provided as regular expression, if \code{regex =
  TRUE}.}

\item{regex}{\code{\link[=logical]{logical(1)}}\cr if \code{regex = TRUE}, the columns
defined in \code{table} are filtered by \code{\link[stringr]{str_detect}}
on the column values (if you define several, they are combined with an AND
operator), otherwise a \code{\link[dplyr]{left_join}} on the ontology is
carried out.}

\item{external}{\code{\link[=logical]{logical(1)}}\cr whether or not to return merely
the table of external concepts.}

\item{ontology}{\code{\link[=list]{ontology(1)}}\cr either a path where the ontology is
stored, or an already loaded ontology.}

\item{table}{\code{\link[=character]{character(1)}}\cr a table containing all columns (a
subset of "id", "class", "label", "has_broader" and "has_source") of the
ontology that shall be filter by the values in those columns.}

\item{per_class}{\code{\link[=logical]{logical(1)}}\cr whether ot not to flatten the
ontology before matching \code{table} with the ontology, whereby
\code{table} would contain columns of the classes in the ontology. This can
be useful when concepts are unique only within their parent concepts, so
that unique identification is only possible when they are matched together.}
}
\value{
A table of a subset of the ontology according to the values in
\code{...}
}
\description{
Get a concept in an ontology
}
\examples{
ontoDir <- system.file("extdata", "crops.rds", package = "ontologics")
onto <- load_ontology(path = ontoDir)

# exact matches from a loaded ontology ...
get_concept(label = "FODDER CROPS", ontology = onto)

# extract concepts based on regular expressions
get_concept(label = "crop", id = ".03$", regex = TRUE, ontology = ontoDir)

}
